#lang racket

;;;; Chapter5.2 - A Register-Machine Simulator

;;; 5.2.1 - The Machine Model
;; The machine model generated by make-machine is represented as
;; a procedure with local state using the message-passing techniques developed in Chapter 3.

; Make-machine then extends this basic model (by sending it messages) to include the registers, operations, and controller of the particular machine being defined.
; First it allocates a register in the new machine for each of the supplied register names and installs the designated operations in the machine. 
; Then it uses an assembler (described below in 5.2.2) to transform the controller list into instructions for the new machine and installs these as the machineâ€™s instruction sequence.
; Make-machine returns as its value the modified machine model.
(define (make-machine register-names 
                      ops 
                      controller-text)
  (let ((machine (make-new-machine)))
    (for-each (lambda (register-name)
                ((machine 'allocate-register) 
                 register-name))
              register-names)
    ((machine 'install-operations) ops)
    ((machine 'install-instruction-sequence)
     (assemble controller-text machine))
    machine))

; Registers
(define (make-register name)
  (let ((contents '*unassigned*))
    (define (dispatch message)
      (cond ((eq? message 'get) contents)
            ((eq? message 'set)
             (lambda (value)
               (set! contents value)))
            (else
             (error "Unknown request: REGISTER" message))))
    dispatch))

(define (get-contents register)
  (register 'get))
(define (set-contents! register value)
  ((register 'set) value))

; The stack
; We can also represent a stack as a procedure with local state.
; make-stack creates a stack whose local state consists of a list of the items on the stack.
; 1. push, 2. pop, 3. initialize.
(define (make-stack)
  (let ((s '()))
    (define (push x)
      (set! s (cons x s)))
    (define (pop)
      (if (null? s)
          (error "Empty stack: POP")
          (let ((top (car s)))
            (set! s (cdr s))
            top)))
    (define (initialize)
      (set! s '())
      'done)
    (define (dispatch message)
      (cond ((eq? message 'push) push)
            ((eq? message 'pop) (pop))
            ((eq? message 'initialize) (initialize))
            (else (error "Unknown request: STACK" message))))
    dispatch))

; The basic machine
(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (the-instruction-sequence '()))
    (let ((the-ops
           (list
            (list 'initialize-stack (lambda () (stack 'initialize)))))
          (register-table
           (list
            (list 'pc pc)
            (list 'flag flag))))
      (define (allocate-register name)
        (if (assoc name register-table)
            (error "Multiply defined register: " name)
            (set! register-table
                  (cons
                   (list name (make-register name))
                   register-table)))
        'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
              (cadr val)
              (error "Unknown register: " name))))
      (define (execute)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'done
              (begin
                ((instruction-execution-proc (car insts)))
                (execute)))))
      (define (dispatch message)
        (cond ((eq? message 'start) (set-contents! pc the-instruction-sequence)
                                    (execute))
              ((eq? message 'install-instruction-sequence) (lambda (seq) (set! the-instruction-sequence seq)))
              ((eq? message 'allocate-register) allocate-register)
              ((eq? message 'get-register) lookup-register)
              ((eq? message 'install-operations) (lambda (ops) (set! the-opes (append the-ops ops))))
              ((eq? message 'stack) stack)
              ((eq? message 'operations) the-ops)
              (else (error "Unknown request: MACHINE " message))))
      dispatch)))

; The flag register is used to control branching in the simulated machine.
; - Test instructions set the contents of flag to the result of the test (true or false)
; - Branch instructions decide whether or not to branch by examining the contents of flag.
; The pc register determines the sequencing of instructions as the machine runs.
; - This sequencing is implemented by the internal procedure execute.
; - As part of its operation, each instruction execution procedure modifies pc
; - to indicate the next instruction to be executed.
; - Branch and goto instructions change pc to point to the new destination.

(define (start machine)
  (machine 'start))

(define (get-register-contents 
         machine register-name)
  (get-contents 
   (get-register machine register-name)))

(define (set-register-contents! 
         machine register-name value)
  (set-contents! 
   (get-register machine register-name) 
   value)
  'done)

(define (get-register machine reg-name)
  ((machine 'get-register) reg-name))

