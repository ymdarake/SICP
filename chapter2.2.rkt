#lang racket
(require "math.rkt")

(define (list-ref items n)
  (if (= n 0)
      (car items)
      (list-ref (cdr items) (- n 1))))

(define (length-recur items)
  (if (null? items)
      0
      (+ 1 (length-recur (cdr items)))))

(define (length-iter items)
  (define (iter acc rest)
    (if (null? rest)
        acc
        (iter (+ acc 1) (cdr rest))))
  (iter 0 items))

(define (append list1 list2)
  (if (null? list1)
      list2
      (cons (car list1) (append (cdr list1) list2))))

; Exercise 2.17
(define (last-pair ls)
  (define (iter previous rest)
    (if (null? rest)
        previous
        (iter (car rest) (cdr rest))))
  (iter '() ls))

; Exercise 2.18
(define (reverse-iter ls)
  (define (iter acc rest)
    (if (null? rest)
        acc
        (iter (cons (car rest) acc) (cdr rest))))
  (iter '() ls))

; Exercise 2.19
(define (cc amount coin-values)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (no-more? coin-values)) 0)
        (else
         (+ (cc amount (except-first-denomination coin-values))
            (cc (- amount (first-denomination coin-values)) coin-values)))))

(define (first-denomination coin-values) (car coin-values))
(define (except-first-denomination coin-values) (cdr coin-values))
(define (no-more? coin-values) (null? coin-values))

(define us-coins (list 50 25 10 5 1))
(define uk-coins (list 100 50 20 10 5 2 1 0.5))
;The answer does not depend on the order of the list because cc exhaustively traverses the list when calculating the answer.
; Recall that the process generated by cc takes the shape of a tree.
; It terminates the evaluation of a branch only when the list is empty or when the amount of change remaining is less than or equal to zero.
; Termination of the branch does not depend on the magnitude of the remaining values in the list.

; Exercise 2.20
; dotted-tail notation
(define (same-parity first . rest)
  (define (test x)
    (if (= 0 (remainder first 2))
        (lambda (x) (= 0 (remainder x 2)))
        (lambda (x) (= 1 (remainder x 2)))))
  (define (iter acc ls)
    (cond ((null? ls) (reverse acc))
          ((test (car ls)) (iter (cons (car ls) acc) (cdr ls)))
          (else (iter acc (cdr ls)))))
  (iter (list first) rest))

; Exercise 2.21
(define (square-list-recur items)
  (if (null? items)
      '()
      (cons (square (car items)) (square-list-recur (cdr items)))))

(define (square-list-map items)
  (map (lambda (x) (square x))
       items))

; Exercise 2.22
; Because it conses the last item from the front of the list to the answer, then gets the next item from the front.
; new-and-not-improved version conses the answer to the squared value,
; but the answer is a list, so you'll end up with (list (list ...) lastest-square). 


;Exercise 2.23
(define (for-each-handmade proc items)
  (define (iter f items . execplace)
    (if (null? items)
        #t
        (iter f (cdr items) (f (car items)))))
  (iter proc items))

(define (count-leaves tree)
  (cond ((null? tree) 0)
        ((not (pair? tree)) 1)
        (else (+
               (count-leaves (car tree))
               (count-leaves (cdr tree))))))

; Exercise 2.26
(define x (list 1 2 3))
(define y (list 4 5 6))
;(append x y)
;(cons x y); attach x to y's head as an element.
;(list x y); make a list of 2-list elements.

;;;;; Exercise 2.27
;(define (deep-reverse xs)
;  (if (or (null? xs) (not (list? xs)))
;      xs
;      (if (list? (car xs))
;          (if (list? (cdr xs))
;              (list (deep-reverse (cdr xs)) (deep-reverse (car xs)))
;              (list (cdr xs) (deep-reverse (car xs))))
;          (if (list? (cdr xs))
;              (list (deep-reverse (cdr xs)) (car xs))
;              (list (cdr xs) (car xs))))))
(define (deep-reverse t)
  (if (pair? t)
      (reverse (map deep-reverse t))
      t))

; Exercise 2.28
(define (fringe items)
  (if (pair? items)
      (flatten (map fringe items))
      items))

;; Exercise 2.29
(define (make-mobile left right)
  (list left right))
(define (make-branch length structure)
  (list length structure))
;a.
(define (left-branch mobile)
  (car mobile))
(define (right-branch mobile)
  (cadr mobile))
(define (branch-length branch)
  (car branch))
(define (branch-structure branch)
  (cadr branch))
;b.
(define (total-weight mobile)
  (if (number? mobile)
      mobile
      (+ (total-weight (branch-structure (left-branch mobile)))
         (total-weight (branch-structure (right-branch mobile))))))
; (total-weight (make-mobile (make-branch 1 2) (make-branch 1 (make-mobile (make-branch 1 5) (make-branch 1 9)))))
;c.
(define (balanced? mobile)
  (= (torque (left-branch mobile))
     (torque (right-branch mobile))))
(define (torque branch)
  (let ((structure (branch-structure branch)))
    (if (mobile? (branch-structure branch))
        (* (total-weight structure)
           (branch-length branch))
        (* structure
           (branch-length branch)))))
(define (mobile? x)
  (pair? x))
; (balanced? (make-mobile (make-branch 7 2) (make-branch 1 (make-mobile (make-branch 1 5) (make-branch 1 9)))))




