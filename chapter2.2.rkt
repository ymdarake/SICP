#lang racket

(define (list-ref items n)
  (if (= n 0)
      (car items)
      (list-ref (cdr items) (- n 1))))

(define (length-recur items)
  (if (null? items)
      0
      (+ 1 (length-recur (cdr items)))))

(define (length-iter items)
  (define (iter acc rest)
    (if (null? rest)
        acc
        (iter (+ acc 1) (cdr rest))))
  (iter 0 items))

(define (append list1 list2)
  (if (null? list1)
      list2
      (cons (car list1) (append (cdr list1) list2))))

; Exercise 2.17
(define (last-pair ls)
  (define (iter previous rest)
    (if (null? rest)
        previous
        (iter (car rest) (cdr rest))))
  (iter '() ls))

; Exercise 2.18
(define (reverse-iter ls)
  (define (iter acc rest)
    (if (null? rest)
        acc
        (iter (cons (car rest) acc) (cdr rest))))
  (iter '() ls))

; Exercise 2.19
(define (cc amount coin-values)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (no-more? coin-values)) 0)
        (else
         (+ (cc amount (except-first-denomination coin-values))
            (cc (- amount (first-denomination coin-values)) coin-values)))))

(define (first-denomination coin-values) (car coin-values))
(define (except-first-denomination coin-values) (cdr coin-values))
(define (no-more? coin-values) (null? coin-values))

(define us-coins (list 50 25 10 5 1))
(define uk-coins (list 100 50 20 10 5 2 1 0.5))
;The answer does not depend on the order of the list because cc exhaustively traverses the list when calculating the answer.
; Recall that the process generated by cc takes the shape of a tree.
; It terminates the evaluation of a branch only when the list is empty or when the amount of change remaining is less than or equal to zero.
; Termination of the branch does not depend on the magnitude of the remaining values in the list.

