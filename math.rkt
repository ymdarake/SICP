#lang racket
(provide average square prime?)

(define (inc n) (+ n 1))
(define (square n) (* n n))
(define (average x y) (/ (+ x y) 2))
(define (cube x) (* x x x))
(define (sum f start next end)
  (if (> start end)
      0
      (+ (f start)
         (sum f (next start) next end))))
(define (sum-cubes a b)
  (sum cube a inc b))
(define (smallest-div n) 
  (define (divides? a b) 
    (= 0 (remainder b a))) 
  (define (find-div n test) 
    (cond ((> (square test) n) n) ((divides? test n) test) 
          (else (find-div n (+ test 1))))) 
  (find-div n 2)) 
(define (prime? n) 
  (if (= n 1) false (= n (smallest-div n))))
(define (gcd m n)
  (cond ((< m n) (gcd n m))
        ((= n 0) m)
        (else (gcd n (remainder m n)))))
(define (relative-prime? m n)
  (= (gcd m n) 1))

