#lang racket

;;;; Chapter5.2 - A Register-Machine Simulator

;;; 5.2.1 - The Machine Model
;; The machine model generated by make-machine is represented as
;; a procedure with local state using the message-passing techniques developed in Chapter 3.

; Make-machine then extends this basic model (by sending it messages) to include the registers, operations, and controller of the particular machine being defined.
; First it allocates a register in the new machine for each of the supplied register names and installs the designated operations in the machine. 
; Then it uses an assembler (described below in 5.2.2) to transform the controller list into instructions for the new machine and installs these as the machine’s instruction sequence.
; Make-machine returns as its value the modified machine model.
(define (make-machine register-names 
                      ops 
                      controller-text)
  (let ((machine (make-new-machine)))
    (for-each (lambda (register-name)
                ((machine 'allocate-register) 
                 register-name))
              register-names)
    ((machine 'install-operations) ops)
    ((machine 'install-instruction-sequence)
     (assemble controller-text machine))
    machine))

; Registers
(define (make-register name)
  (let ((contents '*unassigned*))
    (define (dispatch message)
      (cond ((eq? message 'get) contents)
            ((eq? message 'set)
             (lambda (value)
               (set! contents value)))
            (else
             (error "Unknown request: REGISTER" message))))
    dispatch))

(define (get-contents register)
  (register 'get))
(define (set-contents! register value)
  ((register 'set) value))

; The stack
; We can also represent a stack as a procedure with local state.
; make-stack creates a stack whose local state consists of a list of the items on the stack.
; 1. push, 2. pop, 3. initialize.
(define (make-stack)
  (let ((s '()))
    (define (push x)
      (set! s (cons x s)))
    (define (pop)
      (if (null? s)
          (error "Empty stack: POP")
          (let ((top (car s)))
            (set! s (cdr s))
            top)))
    (define (initialize)
      (set! s '())
      'done)
    (define (dispatch message)
      (cond ((eq? message 'push) push)
            ((eq? message 'pop) (pop))
            ((eq? message 'initialize) (initialize))
            (else (error "Unknown request: STACK" message))))
    dispatch))

; The basic machine
(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (the-instruction-sequence '()))
    (let ((the-ops
           (list
            (list 'initialize-stack (lambda () (stack 'initialize)))))
          (register-table
           (list
            (list 'pc pc)
            (list 'flag flag))))
      (define (allocate-register name)
        (if (assoc name register-table)
            (error "Multiply defined register: " name)
            (set! register-table
                  (cons
                   (list name (make-register name))
                   register-table)))
        'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
              (cadr val)
              (error "Unknown register: " name))))
      (define (execute)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'done
              (begin
                ((instruction-execution-proc (car insts)))
                (execute)))))
      (define (dispatch message)
        (cond ((eq? message 'start) (set-contents! pc the-instruction-sequence)
                                    (execute))
              ((eq? message 'install-instruction-sequence) (lambda (seq) (set! the-instruction-sequence seq)))
              ((eq? message 'allocate-register) allocate-register)
              ((eq? message 'get-register) lookup-register)
              ((eq? message 'install-operations) (lambda (ops) (set! the-ops (append the-ops ops))))
              ((eq? message 'stack) stack)
              ((eq? message 'operations) the-ops)
              (else (error "Unknown request: MACHINE " message))))
      dispatch)))

; The flag register is used to control branching in the simulated machine.
; - Test instructions set the contents of flag to the result of the test (true or false)
; - Branch instructions decide whether or not to branch by examining the contents of flag.
; The pc register determines the sequencing of instructions as the machine runs.
; - This sequencing is implemented by the internal procedure execute.
; - As part of its operation, each instruction execution procedure modifies pc
; - to indicate the next instruction to be executed.
; - Branch and goto instructions change pc to point to the new destination.

(define (start machine)
  (machine 'start))

(define (get-register-contents 
         machine register-name)
  (get-contents 
   (get-register machine register-name)))

(define (set-register-contents! 
         machine register-name value)
  (set-contents! 
   (get-register machine register-name) 
   value)
  'done)

(define (get-register machine reg-name)
  ((machine 'get-register) reg-name))


;;; 5.2.2 - The Assembler

;; The assembler transforms the sequence of controller expressions for a machine
; into a corresponding list of machine instructions, each with its execution procedure.
; - Overall, the assembler is much like the evaluators we studied in Chapter 4:
; - there is an input language (in this case, the register-machine language) and
; - we must perform an appropriate action for each type of expression in the language.

; As it scans the text, it constructs both a list of instructions and a table that associates each label with a pointer into that list.
; Then the assembler augments the instruction list by inserting the execution procedure for each instruction.
; - Assemble calls extract-labels to build the initial instruction list and label table from the supplied controller text.
; - The second argument to extract-labels is a procedure to be called to process these results.
(define (assemble controller-text machine)
  (extract-labels controller-text
                  (lambda (insts labels)
                    (update-insts! insts labels machine)
                    insts)))

; Extract-labels takes as arguments a list text (the sequence of controller instruction expressions) and a receive procedure.
; Receive(↑lamda written up there) will be called with two values:
; - (1) a list insts of instruction data structures, each containing an instruction from text.
; - (2) a table called labels, which associates each label from text with the position in the list insts that the label designates.
(define (extract-labels text receive)
  (if (null? text)
      (receive '() '())
      (extract-labels
       (cdr text)
       (lambda (insts labels)
         (let ((next-inst (car text)))
           (if (symbol? next-inst)
               (receive insts (cons (make-label-entry next-inst insts) labels))
               (receive (cons (make-instruction next-inst) insts) labels)))))))

; update-insts! modifies the instruction list,
; - which initially contains only the text of the instructions,
; - to include the corresponding execution procedures:
(define (update-insts! insts labels machine)
  (let ((pc (get-register machine 'pc))
        (flag (get-register machine 'flag))
        (stack (machine 'stack))
        (ops (machine 'operations)))
    (for-each
     (lambda (inst)
       (set-instruction-execution-proc!
        inst
        (make-execution-procedure
         (instruction-text inst)
         labels
         machine
         pc
         flag
         stack
         ops)))
     insts)))

; The machine instruction data structure simply pairs the instruction text with the corresponding execution procedure.
(define (make-instruction text) (cons text '()))
(define (instruction-text inst) (car inst))
(define (instruction-execution-proc inst) (cdr inst))
(define (set-instruction-execution-proc! inst proc) (set-cdr! inst proc))

; Elements of the label table are pairs:
(define (make-label-entry label-name insts)
  (cons label-name insts))
; Entries will be looked up in the table with
(define (lookup-label labels label-name)
  (let ((val (assoc label-name labels)))
    (if val
        (cdr val)
        (error "Undefined label: ASSEMBLE" label-name))))

; Exercise 5.8
;start
;  (goto (label here))
;here
;  (assign a (const 3))
;  (goto (label there))
;here
;  (assign a (const 4))
;  (goto (label there))
;there


;;; 5.2.3 - Generating Execution Procedures for Instructions
;; The assembler calls make-execution-procedure to generate the execution procedure for an instruction.

(define (make-execution-procedure
         inst labels machine pc flag stack ops)
  (cond ((eq? (car inst) 'assign) (make-assign inst machine labels ops pc))
        ((eq? (car inst) 'test) (make-test inst machine labels flag pc))
        ((eq? (car inst) 'branch) (make-branch inst machine labels flag pc))
        ((eq? (car inst) 'goto) (make-goto inst machine labels flag pc))
        ((eq? (car inst) 'save) (make-save inst machine labels flag pc))
        ((eq? (car inst) 'restore) (make-restore inst machine labels flag pc))
        ((eq? (car inst) 'perform) (make-perform inst machine labels flag pc))
        (else (error "Unknown instruction type: ASSEMBLE" inst))))
; For each type of instruction in the register-machine language,
; - there is a generator that builds an appropriate execution procedure.
; The details of these procedures determine both the syntax and meaning of the individual instructions in the register-machine language.
;  - We use data abstraction to isolate the detailed syntax of register-machine expressions from the general execution mechanism,
;  - as we did for evaluators in 4.1.2
(define (make-assign inst machine labels operations pc)
  (let ((target (get-register machine (assign-reg-name inst)))
        (value-exp (assign-value-exp inst)))
    (let ((value-proc
           (if (operation-exp? value-exp)
               (make-operation-exp value-exp machin labels operations)
               (make-primitive-exp (car value-exp) machine labels))))
      ; execution procedure for assign
      (lambda ()
        (set-contents! target (value-proc))
        (advance-pc pc)))))

(define (assign-reg-name assign-instruction)
  (cadr assign-instruction))
(define (assign-value-exp assign-instruction)
  (cddr assign-instruction))

; Notice that the work of looking up the register name and parsing the value expression
; is performed just once, at assembly time, not every time the instruction is simulated.
; This saving of work
; - is the reason we use execution procedures, and
; - corresponds directly to the saving in work we obtained by separating program analysis from execution in the evaluator of 4.1.7.

; The result returned by make-assign is the execution procedure for the assign instruction.
; When this procedure is called (by the machine model’s execute procedure),
; it sets the contents of the target register to the result obtained by executing value-proc.
; Then it advances the pc to the next instruction by running the procedure:
(define (advance-pc pc)
  (set-contents! pc (cdr (get-contents pc))))

; At simulation time, the procedure for the condition is called,
; the result is assigned to the flag register, and the pc is advanced:
(define (make-test inst machine labels operations flag pc)
  (let ((condition (test-condition inst)))
    (if (operation-exp? condition)
        (let ((condition-proc (make-operation-exp
                               condition
                               machine
                               labels
                               operations)))
          (lambda ()
            (set-contents! flag (condition-proc))
            (advance-pc pc)))
        (error "Bad TEST instruction: ASSEMBLE" inst))))

(define (test-condition test-instruction)
  (cdr test-instruction))

; The execution procedure for a branch instruction checks the contents of the flag register and
; either sets the contents of the pc to the branch destination (if the branch is taken)
; or else just advances the pc (if the branch is not taken). 
(define (make-branch inst machine labels flag pc)
  (let ((dest (branch-dest inst)))
    (if (label-exp? dest)
        (let ((insts (lookup-label
                      labels
                      (label-exp-label dest))))
          (lambda ()
            (if (get-contents flag)
                (set-contents! pc insts)
                (advance-pc pc))))
        (error "Bad BRANCH instruction: ASSEMBLE" inst))))

(define (branch-dest branch-instruction)
  (cadr branch-instruction))

; A goto instruction is similar to a branch,
; except that the destination may be specified either as a label or as a register, and
; there is no condition to check—the pc is always set to the new destination.
(define (make-goto inst machine labels pc)
  (let ((dest (goto-dest inst)))
    (cond ((label-exp? dest)
           (let ((insts (lookup-label
                         labels
                         (label-exp-label dest))))
             (lambda ()
               (set-contents! pc insts))))
          ((register-exp? dest)
           (let ((reg (get-register
                       machine
                       (register-exp-reg dest))))
             (lambda ()
               (set-contents! pc (get-contents reg)))))
          (else (error "Bad GOTO instruction: ASSEMBLE " inst)))))

(define (goto-dest goto-instruction)
  (cadr goto-instruction))


; The stack instructions save and restore simply use the stack
; with the designated register and advance the pc:
(define (make-save inst machine stack pc)
  (let ((reg (get-register
              machine
              (stack-inst-reg-name inst))))
    (lambda ()
      (push stack (get-contents reg))
      (advance-pc pc))))

(define (make-restore inst machine stack pc)
  (let ((reg (get-register
              machine
              (stack-inst-reg-name inst))))
    (lambda ()
      (set-contents! reg (pop stack))
      (advance-pc pc))))

(define (stack-inst-reg-name stack-instruction)
  (cadr stack-instruction))

; The final instruction type, handled by make-perform, generates an execution procedure for the action to be performed.
; At simulation time, the action procedure is executed and the pc advanced.
(define (make-perform inst machine labels operations pc)
  (let ((action (perform-action inst)))
    (if (operation-exp? action)
        (let ((action-proc
               (make-operation-exp action machine labels operations)))
          (lambda ()
            (action-proc)
            (advance-pc pc)))
        (error "Bad PERFORM instruction: ASSEMBLE " inst))))

(define (perform-action inst) (cdr inst))

; The value of a reg, label, or const expression may be needed
; for assignment to a register (make-assign) or for input to an operation (make-operation-exp, below). 
(define (make-primitive-exp exp machine labels)
  (cond ((constant-exp? exp)
         (let ((c (constant-exp-value exp)))
           (lambda () c)))
        ((label-exp? exp)
         (let ((insts
                (lookup-label
                 labels
                 (label-exp-label exp))))
           (lambda () insts)))
        ((register-exp? exp)
         (let ((r (get-register
                   machine
                   (register-exp-reg exp))))
           (lambda () (get-contents r))))
        (else (error "Unknow expression type: ASSEMBLE " exp))))

(define (register-exp? exp)
  (tagged-list? exp 'reg))
(define (register-exp-reg exp)
  (cadr exp))
(define (constant-exp? exp)
  (tagged-list? exp 'const))
(define (constant-exp-value exp)
  (cadr exp))
(define (label-exp? exp)
  (tagged-list? exp 'label))
(define (label-exp-label exp) 
  (cadr exp))

; Assign, perform, and test instructions may include the application of a machine operation (specified by an op expression) to some operands (specified by reg and const expressions).
; The following procedure produces an execution procedure for an “operation expression”—a list containing the operation and operand expressions from the instruction:
(define (make-operation-exp
         exp machine labels operations)
  (let ((op (lookup-prim (operation-exp-op exp) operations))
        (aprocs (map (lambda (e) (make-primitive-exp e machine labels))
                     (operation-exp-operands exp))))
    (lambda () (apply
                op
                (map (lambda (p) (p)) aprocs)))))

(define (operation-exp? exp)
  (and (pair? exp)
       (tagged-list? (car exp) 'op)))
(define (operation-exp-op operation-exp)
  (cadr (car operation-exp)))
(define (operation-exp-operands operation-exp)
  (cdr operation-exp))
; At simulation time, we call the operand procedures and apply the Scheme procedure that simulates the operation to the resulting values. 
; The simulation procedure is found by looking up the operation name in the operation table for the machine:
(define (lookup-prim symbol operations)
  (let ((val (assoc symbol operations)))
    (if val
        (cadr val)
        (error "Unknown operation: ASSEMBLE"
               symbol))))










